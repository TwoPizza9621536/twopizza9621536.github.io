/*!
  * Simple-Jekyll-Search
  * Copyright 2015-2020, Christian Fei
  * Licensed under the MIT License.
  */
!(function () { 'use strict'; const f = { compile: function (r) { return i.template.replace(i.pattern, function (t, e) { const n = i.middleware(e, r[e], i.template); return void 0 !== n ? n : r[e] || t }) }, setOptions: function (t) { i.pattern = t.pattern || i.pattern, i.template = t.template || i.template, typeof t.middleware === 'function' && (i.middleware = t.middleware) } }; const i = { pattern: /\{(.*?)\}/g, template: '', middleware: function () { } }; const n = function (t, e) { const n = e.length; const r = t.length; if (n < r) return !1; if (r === n) return t === e; t: for (let i = 0, o = 0; i < r; i++) { for (let u = t.charCodeAt(i); o < n;) if (e.charCodeAt(o++) === u) continue t; return !1 } return !0 }; const e = new function () { this.matches = function (t, e) { return n(e.toLowerCase(), t.toLowerCase()) } }(); const r = new function () { this.matches = function (e, t) { return !!e && (e = e.trim().toLowerCase(), (t = t.trim().toLowerCase()).split(' ').filter(function (t) { return e.indexOf(t) >= 0 }).length === t.split(' ').length) } }(); const d = { put: function (t) { if (l(t)) return a(t); if (function (t) { return Boolean(t) && Object.prototype.toString.call(t) === '[object Array]' }(t)) return (function (n) { const r = []; s(); for (let t = 0, e = n.length; t < e; t++)l(n[t]) && r.push(a(n[t])); return r }(t)); return undefined }, clear: s, search: function (t) { return t ? (function (e, n, r, i) { const o = []; for (let t = 0; t < e.length && o.length < i.limit; t++) { const u = (function (t, e, n, r) { for (const i in t) if (!(function (n, r) { for (let t = 0, e = r.length; t < e; t++) { const i = r[t]; if (new RegExp(i).test(n)) return !0 } return !1 }(t[i], r.exclude)) && n.matches(t[i], e)) return t }(e[t], n, r, i)); u && o.push(u) } return o }(u, t, c.searchStrategy, c)).sort(c.sort) : [] }, setOptions: function (t) { c = t || {}, c.fuzzy = t.fuzzy || !1, c.limit = t.limit || 10, c.searchStrategy = t.fuzzy ? e : r, c.sort = t.sort || o, c.exclude = t.exclude || [] } }; function o () { return 0 } const u = []; let c = {}; function s () { return u.length = 0, u } function l (t) { return Boolean(t) && Object.prototype.toString.call(t) === '[object Object]' } function a (t) { return u.push(t), u } c.fuzzy = !1, c.limit = 10, c.searchStrategy = c.fuzzy ? e : r, c.sort = o, c.exclude = []; const p = { load: function (t, e) { const n = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'); n.open('GET', t, !0), n.onreadystatechange = h(n, e), n.send() } }; function h (e, n) { return function () { if (e.readyState === 4 && e.status === 200) try { n(null, JSON.parse(e.responseText)) } catch (t) { n(t, null) } } } const m = function y (t) { if (!(e = t) || !(typeof e.required !== 'undefined' && e.required instanceof Array)) throw new Error('-- OptionsValidator: required options missing'); let e; if (!(this instanceof y)) return new y(t); const r = t.required; this.getRequiredOptions = function () { return r }, this.validate = function (e) { const n = []; return r.forEach(function (t) { typeof e[t] === 'undefined' && n.push(t) }), n } }; const w = { merge: function (t, e) { const n = {}; for (const r in t) n[r] = t[r], typeof e[r] !== 'undefined' && (n[r] = e[r]); return n }, isJSON: function (t) { try { return t instanceof Object && JSON.parse(JSON.stringify(t)) ? !0 : !1 } catch (e) { return !1 } } }; !(function (t) { let i = { searchInput: null, resultsContainer: null, json: [], success: Function.prototype, searchResultTemplate: '<li><a href="{url}" title="{desc}">{title}</a></li>', templateMiddleware: Function.prototype, sortMiddleware: function () { return 0 }, noResultsText: 'No results found', limit: 10, fuzzy: !1, debounceTime: null, exclude: [] }; let n; const e = function (t, e) { e ? (clearTimeout(n), n = setTimeout(t, e)) : t.call() }; const r = ['searchInput', 'resultsContainer', 'json']; const o = m({ required: r }); function u (t) { d.put(t), i.searchInput.addEventListener('input', function (t) { [13, 16, 20, 37, 38, 39, 40, 91].indexOf(t.which) === -1 && (c(), e(function () { l(t.target.value) }, i.debounceTime)) }) } function c () { i.resultsContainer.innerHTML = '' } function s (t) { i.resultsContainer.innerHTML += t } function l (t) { let e; (e = t) && e.length > 0 && (c(), (function (e, n) { const r = e.length; if (r === 0) return s(i.noResultsText); for (let t = 0; t < r; t++)e[t].query = n, s(f.compile(e[t])) }(d.search(t), t))) } function a (t) { throw new Error('SimpleJekyllSearch --- ' + t) } t.SimpleJekyllSearch = function (t) { let n; o.validate(t).length > 0 && a('You must specify the following required options: ' + r), i = w.merge(i, t), f.setOptions({ template: i.searchResultTemplate, middleware: i.templateMiddleware }), d.setOptions({ fuzzy: i.fuzzy, limit: i.limit, sort: i.sortMiddleware, exclude: i.exclude }), w.isJSON(i.json) ? u(i.json) : (n = i.json, p.load(n, function (t, e) { t && a('failed to get JSON (' + n + ')'), u(e) })); t = { search: l }; return typeof i.success === 'function' && i.success.call(t), t } }(window)) }())
